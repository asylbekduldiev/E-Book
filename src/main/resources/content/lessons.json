[
  {
    "title": "JavaFX - Современная разработка UI",
    "lecture": {
      "sections": [
        {
          "title": "ВВЕДЕНИЕ В ООП И ФП",
          "content": "Каждый может написать программу, которую мо-\nжет понять компьютер. Хороший программист пишет\nпрограмму, которую может понять человек.\nМартин Фаулер\nВ связи с проникновением компьютеров во все сферы информационного\nобщества программные системы становятся более простыми для пользователя\nи более сложными по внутренней архитектуре. Программирование стало де-\nлом команды, где маленьким проектом считается тот, который выполняет ко-\nманда из 5–10 специалистов за время от полугода, а большим, который длится\nгодами и исполняется сотнями программистов в разных странах. Основными\nспособами создания сложных программных продуктов стали современные ин-\nформационные технологии и такие методологии, как объект\u00AD но-ориентированное\nпрограммирование (ООП) и функциональное программирование (ФП).\nБазовые понятия ООП\nJava возникла на пике популярности технологий объектно-ориентированно-\nго программирования (ООП) и включает все основные ее парадигмы.\nООП — методология программирования, основанная на функционирова-\nнии программного продукта как результата взаимодействия совокупности объ-\nектов, каждый из которых является экземпляром конкретного класса.\nОбъект — именованная модель реальной сущности, обладающая конкрет-\nными значениями свойств и проявляющая свое поведение.\nКласс — модель информационной сущности, представляющая универсаль-\nный тип данных, состоящая из набора полей данных и методов их обработки.\nВ применении к объектно-ориентированным языкам программирования по-\nнятия объекта и класса конкретизируются. Во всех языках классы и объекты\nобладают рядом общих свойств, таких как инкапсуляция (объединение откры-\nтых данных и закрытых методов), наследование (заимствование функциональ-\nности базовых классов производными), полиморфизм (возможность ис\u00AD пользования\nобъектов с одинаковым интерфейсом при наследовании)."
        },
        {
          "title": "Базовые понятия Java",
          "content": "Объектно-ориентированный язык Java был разработан в компании Sun\nMicrosystems в 1995 году для программирования небольших устройств и вве-\nдения динамики на сайтах в виде апплетов. Немного позже язык Java нашел\nширокое применение в интернет-приложениях, добавив на клиентские веб-\nстраницы динамический интерфейс, улучшив вычислительные возможности.\nОднако уже буквально через несколько лет после создания язык практически\nпокинул клиентские страницы и перебрался на серверы. На стороне клиента\nего место заняли языки JavaScript и его производные.\nПри создании язык Java предполагался более простым, чем его синтаксический\nпредок С++. Сегодня с появлением новых версий возможности языка Java сущест-\nвенно расширились и во многом перекрывают функциональность С++. Java уже не\nуступает по сложности предшественникам и называть его простым нельзя.\nОтсутствие указателей, как наиболее опасного средства языка С++, нельзя\nсчитать сужением возможностей, а тем более — недостатком, это просто тре-\nбование безопасности. Возможность работы с произвольными адресами памя-\nти через безтиповые указатели позволяет игнорировать защиту памяти. Вместо\nуказателей в Java широко используются ссылки. Отсутствие в Java множест-\nвенного наследования состояния легко заменяется на более понятные кон-\nструкции с применением интерфейсов.\nСистемная библиотека классов языка Java содержит классы и пакеты, реали-\nзующие и расширяющие базовые возможности языка, а также сетевые средства,\nвзаимодействие с базами данных, многопоточность и многое другое. Методы\nклассов, включенные в эти библиотеки, вызываются JVM (Java Virtual Machine)\nво время интерпретации программы."
        },
        {
          "title": "Простое приложение",
          "content": "Изучение любого языка программирования удобно начинать с программы\nпередачи символьного сообщения на консоль.\n// # 1 # простое линейное приложение # HelloTutorial.java\npublic class HelloTutorial {\npublic static void main(String[] args) {\nSystem.out.println(\"tutorial->https://docs.oracle.com/javase/tutorial/\");\n}\n}\nЗдесь функция main(), с которой начинается выполнение любой програм-\nмы Java, является методом класса HelloTutorial. Такая простая структура\nкласса не является хорошей. Пусть в процессе тестирования или внедрения\nсистемы окажется, что фразу необходимо заменить на другую, например,\nв конце поставить восклицательный знак. Для этого программисту придется\nобыскивать весь код, искать места, где встречается указанная фраза, и заме-\nнять ее новой. Во избежание подобных проблем сообщение лучше хранить\nв отдельном методе или константе (а еще лучше — в файле) и при необходи-\nмости вызывать его. Тогда изменение текста сообщения приведет к локально-\nму изменению одной-единственной строки кода. В следующем примере этот\nкод будет переписан с использованием двух классов, реализованных на осно-\nве простейшего применения объектно-ориентированного программирова-\nния:\n/* # 2 # простое объектно-ориентированное приложение # FirstProgram.java */\npackage by.epam.learn.main;\npublic class FirstProgram {\npublic static void main(String[] args) {\n// declaring and creating an object\nTutorialAction action = new TutorialAction();\n// calling a method that outputs a string\naction.printMessage(\"tutorial-> https://docs.oracle.com/javase/tutorial/\");\n}\n}\n/* # 3 # простой класс # TutorialAction.java */\nclass TutorialAction {\nvoid printMessage(String msg) { // method definition\n// output string\nSystem.out.println(msg);\n}\n}\n14\nВВЕДЕНИЕ В ООП И ФП\nЗдесь класс FirstProgram используется для того, чтобы определить метод\nmain(), который вызывается автоматически интерпретатором Java и может назы-\nваться контроллером этого примитивного приложения. Метод main() получает\nв качестве параметра аргументы командной строки String[]args, представляющие\nмассив строк, и является открытым (public) членом класса. Это означает, что ме-\nтод main() может быть виден и доступен любому классу. Ключевое слово static\nобъявляет методы и переменные класса, используемые при работе с классом в це-\nлом, а не только с объектом класса. Символы верхнего и нижнего регистров здесь\nразличаются. Тело метода main() содержит объявление объекта:\nTutorialAction action = new TutorialAction();\nи вызов его метода:\naction.printMessage(\"tutorial-> https://docs.oracle.com/javase/tutorial/\");\nВывод строки tutorial-> https://docs.oracle.com/javase/tutorial/ в примере\nосуществляет метод println() (ln — переход к новой строке после вывода) ста-\nтического поля-объекта out класса System, который подключается к приложе-\nнию автоматически вместе с пакетом java.lang. Приведенную программу необ-\nходимо поместить в файл FirstProgram.java (расширение .java обязательно),\nимя которого должно совпадать с именем public-класса.\nПеред объявлением класса располагается строка\npackage by.epam.learn.main;\nуказывающая на принадлежность класса пакету с именем by.epam.learn.main,\nкоторый является на самом деле каталогом на диске. Для приложения, состоя-\nщего из двух классов, наличие пакетов не является необходимостью. Однако\nдаже при отсутствии слова package классы будут отнесены к пакету по умол-\nчанию (unnamed), размещенному в корне проекта. Если же приложение состо-\nит из нескольких сотен классов, то размещение классов по пакетам является\nжизненной необходимостью.\nКлассы из примеров 2 и 3 могут сохраняться как в одном файле, так и в двух\nфайлах FirstProgram.java и TutorialAction.java. На практике следует хранить\nклассы в отдельных файлах, что позволяет всем разработчикам проекта быст-\nрее воспринимать концепцию приложения в целом.\n/* # 4 # простое объектно-ориентированное приложение # FirstProgram.java */\npackage by.epam.learn.main;\nimport by.epam.learn.action.TutorialAction; // import a class from another package\npublic class FirstProgram {\npublic static void main(String[] args) {\nTutorialAction action = new TutorialAction();\naction.printMessage(\"tutorial-> https://docs.oracle.com/javase/tutorial/\");\n}\n}"
        },
        {
          "title": "Установка JDK и IDE",
          "content": "Чтобы начать программировать, необходимо скачать установку Java с офи-\nциального сайта производителя oracle.com по линку https://www.oracle.com/\njava/technologies/javase-downloads.html.\nЗатем установить на компьютер. При инсталляции рекомендуется указы-\nвать для размещения корневой каталог. Если JDK установлена в директории\n(для Windows) c:\\Java\\jdk[version], то каталог, который компилятор Java будет\nрассматривать как корневой для иерархии пакетов, можно вручную задавать\nс помощью переменной среды окружения в виде: СLASSPATH=.;c:\\Java\\\njdk[version]\\.\nПеременной задано еще одно значение «.» для использования текущей ди-\nректории, например, с:\\workspace в качестве рабочей для хранения своих соб-\nственных приложений.\nЧтобы можно было вызывать сам компилятор и другие исполняемые про-\nграммы, переменную PATH нужно проинициализировать в виде PATH=\nc:\\Java\\jdk[version]\\bin.\nЭтот путь указывает на месторасположение файлов javac.exe и java.exe.\nВ различных версиях операционных систем путь к JDK может указываться\nразличными способами.\nJDK (Java Development Kit) — полный набор для разработки и запуска при-\nложений, состоящий из компилятора, утилит, исполнительной системы JRE,\nбиблиотек, документации.\nJRE (Java Runtime Environment) — минимальный набор для исполнения\nприложений, включающий JVM, но без средств разработки.\nJVM (Java Virtual Machine) — базовая часть исполняющей системы Java,\nкоторая интерпретирует байт-код Java, скомпилированный из исходного текста\nJava-программы для конкретной операционной системы.\nОднако при одновременном использовании нескольких различных версий\nкомпилятора и различных библиотек применение переменных среды окруже-\nния начинает мешать эффективной работе, так как при выполнении приложе-\nния поиск класса осуществляется независимо от версии. Когда виртуальная\nмашина обнаруживает класс с подходящим именем, она его и подгружает.\n16\nВВЕДЕНИЕ В ООП И ФП\nТакая ситуация предрасполагает к ошибкам, порой трудноопределимым.\nПоэтому переменные окружения начинающим программистам лучше не опре-\nделять вовсе.\nДля компиляции и запуска приложений можно использовать два способа:\n1) Командная строка;\n2) IDE (IntelliJ IDEA, Eclipse, NetBeans etc.).\nIDE позволяют создавать, компилировать и запускать приложения в значи-\nтельно более удобной форме, чем с помощью командной строки.\nIntelliJ IDEA — интегрированная среда разработки программного обеспече-\nния для Java, разработанная компанией JetBrains.\nЗагрузить IntelliJ IDEA можно на официальном сайте https://www.jetbrains.com/\nidea/. Среда IDEA используется для разработки приложений, поэтому необходимо\nустановить Java Development Kit (JDK). Студентам и магистрантам предоставля-\nется возможность установить полную лицензионную версию после заполнения\nрегистрационной формы https://www.jetbrains.com/shop/eform/students.\nПосле установки IntelliJ IDEA программа предложит настроить среду раз-\nработки: выбрать тему и установить дополнительные плагины.\nEclipse — сообщество открытого кода, или open source, чьи проекты сфоку-\nсированы на создании открытой платформы для разработки, развертывания,\nуправления приложениями с использованием различных фреймворков, ин-\nструментов и сред исполнения. Загрузить продукты Eclipse можно на офици-\nальном сайте http://eclipse.org/.\nДля установки Eclipse Java IDE необходимо распаковать загруженный архив\nв ту директорию, в которой будет храниться IDE. Предварительно также необ-\nходимо установить JDK."
        },
        {
          "title": "Основы классов и объектов",
          "content": "Классы в языке Java объединяют поля класса, методы, конструкторы, логи-\nческие блоки и внутренние классы. Основные отличия от классов C++: все\nфункции определяются внутри классов и называются методами; невозможно\nсоздать метод, не являющийся методом класса, или объявить метод вне класса;\nспецификаторы доступа public, private, protected воздействуют только на те\n18\nВВЕДЕНИЕ В ООП И ФП\nобъявления полей, методов и классов, перед которыми они стоят, а не на уча-\nсток от одного до другого спецификатора, как в С++; элементы по умолчанию\nне устанавливаются в private, а доступны для классов из данного пакета.\nОбъявление класса в общем виде следующее:\n[specificators] class ClassName [extends SuperClass] [implements list_interfaces] {\n/* implementation */\n}\nСпецификатор доступа к классу может быть public (класс доступен в дан-\nном пакете и вне пакета). По умолчанию, если спецификатор класса public не\nзадан, он устанавливается в дружественный (friendly или private-package).\nТакой класс доступен только в текущем пакете. Спецификатор friendly так же,\nкак и private-package, при объявлении вообще не используется и не является\nключевым словом языка. Это слово используется в сленге программистов, что-\nбы обозначить значение по умолчанию.\nКроме этого, спецификатор может быть final (класс не может иметь под-\nклассов) и abstract (класс может содержать абстрактные нереализованные ме-\nтоды, объект такого класса создать нельзя).\nКласс наследует все свойства и методы суперкласса (базового класса), ука-\nзанного после ключевого слова extends, и может включать множество интер-\nфейсов, перечисленных через запятую после ключевого слова implements.\nИнтерфейсы относительно похожи на абстрактные классы, содержащие только\nстатические константы и не имеющие конструкторов, но имеют целый ряд\nсерьезных архитектурных различий.\nВсе классы любого приложения условно разделяются на две группы: клас-\nсы — носители информации, и классы, работающие с этой информацией.\nКлассы, обладающие информацией, содержат данные о предметной области\nприложения. Например, если приложение предназначено для управления воз-\nдушным движением, то предметной областью будут самолеты, билеты, багаж,\nпассажиры и пр. При проектировании классов информационных экспертов\nважна инкапсуляция, обеспечивающая значениям полей классов корректность\nинформации.\nВ качестве примера с нарушением инкапсуляции можно рассмотреть класс\nCoin в приложении по обработке монет.\n// # 7 # простой пример класса носителя информации # Coin.java\npackage by.epam.learn.bean;\npublic class Coin {\npublic double diameter; // encapsulation violation\nprivate double weight; // correct encapsulation\npublic double getDiameter() {\nreturn diameter;\n}\n19\nJAVA FROM EPAM\npublic void setDiameter(double value) {\nif (value > 0) {\ndiameter = value;\n} else {\ndiameter = 0.01; // default value\n}\n}\npublic double takeWeight() { // incorrect method name\nreturn weight;\n}\npublic void setWeight(double value) {\nweight = value;\n}\n}\nКласс Coin содержит два поля diameter и weight, помеченные как public\nи private. Значение поля weight можно изменять только при помощи методов,\nнапример, setWeight (double value). В некоторых ситуациях замена некоррект-\nного значения на значение по умолчанию может привести к более грубым\nошибкам в дальнейшем, поэтому часто вместо замены производится генерация\nисключения. Поле diameter доступно непосредственно через объект класса\nCoin. Поле, объявленное таким способом, считается объявленным с наруше-\nнием «тугой» инкапсуляции, следствием чего может быть нарушение коррект-\nности информации, как это показано ниже:\n// # 8 # демонстрация последствий нарушения инкапсуляции # CoinMain.java\npackage by.epam.learn.main;\nimport by.epam.learn.bean.Coin;\npublic class CoinMain {\npublic static void main(String[] args) {\nCoin coin = new Coin();\ncoin.diameter = -0.12; // incorrect: direct access--> ob.setWeight(100);\n// coin.weight = -150; // field is not available: compile error\n}\n}\nЧтобы поле diameter стало недоступно напрямую, а компиляция кода вида\ncoin.diameter = -0.12;\nстала невозможной, следует поле diameter класса Coin объявить в виде\nprivate double diameter;\nтогда строка с попыткой прямого присваивания значения поля с помощью\nссылки на объект приведет к ошибке компиляции.\n20\nВВЕДЕНИЕ В ООП И ФП\n// # 9 # «туго» инкапсулированный класс (Java Bean) # Coin.java\npackage by.epam.learn.bean;\npublic class Coin {\nprivate double diameter;\nprivate double weight;\npublic double getDiameter() {\nreturn diameter;\n}\npublic void setDiameter(double value) {\nif(value > 0) {\ndiameter = value;\n} else {\nSystem.out.println(\"Negative diameter!\");\n}\n}\npublic double getWeight() { // correct name\nreturn weight;\n}\npublic void setWeight(double value) {\nweight = value;\n}\n}\nПроверка корректности входящей извне информации осуществляется в ме-\nтоде setDiameter(double value) и позволяет уведомить о нарушении инициали-\nзации объекта. Доступ к public-методам объекта класса осуществляется только\nпосле создания объекта данного класса.\n/* # 10 # создание объекта, доступ к полям и методам объекта # CompareCoin.java\n# CoinMain.java */\npackage by.epam.learn.action;\nimport by.epam.learn.bean.Coin;\npublic class CompareCoin {\npublic void compareDiameter(Coin first, Coin second) {\ndouble delta = first.getDiameter() - second.getDiameter();\nif (delta > 0) {\nSystem.out.println(\"The first coin is more than the second for \" + delta);\n} else if (delta == 0) {\nSystem.out.println(\"Coins have the same diameter\");\n} else {\nSystem.out.println(\"The second coin is more than the first on \" + -delta);\n}\n}\n}\npackage by.epam.learn.main;\nimport by.epam.learn.bean.Coin;\nimport by.epam.learn.action.CompareCoin;\n21\nJAVA FROM EPAM\npublic class CoinMain {\npublic static void main(String[] args) {\nCoin coin1 = new Coin();\ncoin1.setDiameter(-0.11); // error message\ncoin1.setDiameter(0.12); // correct\ncoin1.setWeight(150);\nCoin coin2 = new Coin();\ncoin2.setDiameter(0.21);\ncoin2.setWeight(170);\nCompareCoin compare = new CompareCoin();\ncompare.compareDiameter(coin1, coin2);\n}\n}\nКомпиляция и выполнение данного кода приведут к выводу на консоль сле-\nдующей информации:\nNegative diameter!\nThe second coin is more than the first on 0.09\nОбъект класса создается за два шага. Сначала объявляется ссылка на объект\nкласса. Затем с помощью оператора new создается экземпляр объекта, например:\nCoin coin; // declaring an object reference\ncoin = new Coin(); // object instantiation\nОднако эти два действия обычно объединяют в одно:\nCoin coin = new Coin();\nОператор new вызывает конструктор, в данном примере используется кон-\nструктор по умолчанию без параметров, но в круглых скобках могут разме-\nщаться аргументы, передаваемые конструктору, если у класса объявлен кон-\nструктор с параметрами. Операция присваивания для объектов означает, что\nдве ссылки будут указывать на один и тот же участок памяти.\nМетод compareDiameter(Coin first, Coin second) выполняет два действия,\nкоторые следует разделять: выполняет сравнение и печатает отчет. Действия\nслишком различны по природе, чтобы быть совмещенными. Естественным ре-\nшением будет изменить возвращаемое значение метода на int и оставить в нем\nтолько вычисления.\n/* # 11 # метод сравнения экземпляров по одному полю # */\npublic int compareDiameter(Coin first, Coin second) {\nint result = 0;\ndouble delta = first.getDiameter() - second.getDiameter();\nif (delta > 0) {\nresult = 1;\n22\nВВЕДЕНИЕ В ООП И ФП\n} else if (delta < 0) {\nresult = -1;\n}\nreturn result;\n}\nФормирование отчета следует поместить в другой метод другого класса."
        },
        {
          "title": "Объектные ссылки",
          "content": "Java работает не с объектами, а со ссылками на объекты, размещаемыми\nв динамической памяти с помощью оператора new. Это объясняет то, что опе-\nрации сравнения ссылок на объекты не имеют смысла, так как при этом срав-\nниваются адреса. Для сравнения объектов на эквивалентность по значению\nнеобходимо использовать специальные методы, например, equals(Object ob).\nЭтот метод наследуется в каждый класс из суперкласса Object, который лежит\nв корне дерева иерархии всех классов и должен переопределяться в подклассе\nдля определения эквивалентности содержимого двух объектов этого класса.\n/* # 12 # сравнение ссылок и объектов # ComparisonString.java */\npackage by.epam.learn.main;\npublic class ComparisonString {\npublic static void main(String[ ] args) {\nString str1, str2;\nstr1 = \"Java\";\nstr2 = str1; // variable refers to the same string\nSystem.out.println(\"comparison of references \" + (str1 == str2)); // true\nstr2 = new String(\"Java\"); // is equivalent to str2 = new String(str1);\nSystem.out.println(\"comparison of references \"+ (str1 == str2)); // false\nSystem.out.println(\"comparison of values \" + str1.equals(str2)); // true\n}\n}\nВ результате выполнения действия str2\n=\nstr1 получается, что обе ссылки\nссылаются на один и тот же объект. Оператор «==» возвращает true при срав-\nнении ссылок только в том случае, если они ссылаются на один и тот же объект.\nЕсли же ссылку str2 инициализировать конструктором new String(str1), то\nсоздается новый объект в другом участке памяти, который инициализируется\nзначением, взятым у объекта str1. В итоге существуют две ссылки, каждая из\nкоторых независимо ссылается на объект, который никак физически не связан\nс другим объектом. Поэтому оператор сравнения ссылок возвращает результат\nfalse, так как ссылки ссылаются на различные участки памяти. Объекты обла-\nдают одинаковыми значениями, что легко определяется вызовом метода\nequals(Object ob).\n23\nJAVA FROM EPAM\nЕсли в процессе разработки возникает необходимость в сравнении по значе-\nнию объектов классов, созданных программистом, для этого следует переопре-\nделить в данном классе метод equals(Object ob) в соответствии с теми крите-\nриями сравнения, которые существуют для объектов данного типа или по\nстандартным правилам, заданным в документации."
        },
        {
          "title": "Консольный ввод\\вывод",
          "content": "Консоль предоставляет пользователю простой способ взаимодействия\nс программой посредством потоков ввода\\вывода. В Java взаимодействие\nс консолью обеспечивает класс System, а его статические поля in, out и err\nобеспечивают ввод\\вывод. Для вывода информации на консоль используют ме-\nтоды System.out.println() и другие.\nВзаимодействие с консолью с помощью потока (объекта класса) System.in\nпредставляет собой один из простейших способов ввода. При создании первых\nприложений такого рода передача в них информации является единственно до-\nступной для начинающего программиста. В следующем примере рассматрива-\nется ввод информации в виде символа из потока ввода, связанного с консолью,\nи последующего вывода на консоль символа и его числового кода.\n// # 13 # чтение символа из потока System.in # ReadCharMain.java 24\npackage by.epam.learn.console;\nimport java.io.IOException;\npublic class ReadCharMain {\npublic static void main(String[] args) {\nint x;\ntry {\nx = System.in.read();\nchar c = (char)x;\nSystem.out.println(\"Character Code: \" + c + \" =\" + x);\n}\ncatch (IOException e) {\nSystem.err.println(\"i\\o error \" + e);\n}\n}\n}\nОбработка исключительной ситуации IOException, которая может возник-\nнуть в операциях ввода/вывода и в любых других взаимодействиях с внешни-\nми источниками данных, осуществляется в методе main() с помощью реализа-\nции блока try-catch. Если ошибок при выполнении не возникает, выполняется\nблок try, в противном случае генерируется исключительная ситуация, и вы-\nполнение программы перехватывает блок catch.\n24\nВВЕДЕНИЕ В ООП И ФП\nВвод информации осуществляется посредством чтения строки из консоли\nс помощью возможностей объекта класса Scanner, имеющего возможность со-\nединяться практически с любым потоком/источником информации: строкой,\nфайлом, сокетом, адресом в интернете, с любым объектом, из которого можно\nполучить ссылку на поток ввода.\n// # 14 # чтение строки из консоли # ScannerMain.java\npackage by.epam.learn.console;\nimport java.util.Scanner;\npublic class ScannerMain {\npublic static void main(String[] args) {\nSystem.out.println(\"Enter name and press <Enter> & number and press <Enter>:\");\nScanner scan = new Scanner(System.in);\nString name = scan.next();\nSystem.out.println(\"hello, \" + name);\nint num = scan.nextInt();\nSystem.out.println(\"number= \" + num);\nscan.close();\n}\n}\nВ результате запуска приложения будет выведено, например, следующее:\nEnter name and press <Enter> & number and press <Enter>:\nostap\nhello, ostap\n777\nnumber= 777\nКласс Scanner объявляет ряд методов для ввода: next(), nextLine(), nextInt(),\nnextDouble() и др.\nПозже будут рассмотрены более удобные способы извлечения информа-\nции из потока ввода с помощью класса Scanner, в качестве которого может\nфигурировать не только консоль, но и дисковый файл, строка, сокетное сое-\nдинение и пр."
        },
        {
          "title": "Base code conventions",
          "content": "При выборе имени класса, поля, метода использовать цельные слова, пол-\nностью исключить сокращения, кроме общепринятых. По возможности опу-\nскать предлоги и очевидные связующие слова. Аббревиатуры использовать\nтолько в том случае, когда они очевидны. Если избежать сокращения не полу-\nчается, надо помнить, что начало важнее конца, согласные важнее гласных.\nИмя класса всегда пишется с большой буквы: Coin, Developer.\n25\nJAVA FROM EPAM\nЕсли имя класса состоит из двух и более слов, то второе и следующие слова\nпишутся слитно с предыдущим и начинаются с большой буквы: AncientCoin,\nFrontendDeveloper.\nИмя метода всегда пишется с маленькой буквы: perform(), execute().\nЕсли имя метода состоит из двух и более слов, то второе и следующие слова\nпишутся слитно с предыдущим и начинаются с большой буквы: performTask(),\nexecuteBaseAction().\nИмя поля класса, локальной переменной и параметра метода всегда пишут-\nся с маленькой буквы: weight, price.\nЕсли имя поля класса, локальной переменной и параметра метода состоит\nиз двух и более слов, то второе и следующие слова пишутся слитно с предыду-\nщим и начинаются с большой буквы: priceTicket, typeProject.\nКонстанты и перечисления пишутся в верхнем регистре: DISCOUNT,\nMAX_RANGE.\nВсе имена пакетов пишутся с маленькой буквы. Сокращения допустимы\nтолько в случае, если имя пакета слишком длинное: 10 или более символов.\nИспользование цифр и других символов нежелательно."
        }
      ]
    },
    "practice": {
      "sections": [
        {
          "title": "Создание простого приложения",
          "content": "Базовый пример JavaFX приложения с главным окном. Создаем кнопку, контейнер VBox, сцену и главное окно. Приложение демонстрирует основные принципы работы с JavaFX.",
          "code": "import javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\n\npublic class SimpleApp extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        Button button = new Button(\"Нажми меня!\");\n        button.setOnAction(e -> {\n            System.out.println(\"Кнопка нажата!\");\n        });\n        \n        VBox root = new VBox(10);\n        root.getChildren().add(button);\n        \n        Scene scene = new Scene(root, 300, 200);\n        \n        primaryStage.setTitle(\"Простое приложение\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n    \n    public static void main(String[] args) {\n        launch(args);\n    }\n}"
        },
        {
          "title": "Использование FXML",
          "content": "Создание интерфейса с помощью FXML. FXML позволяет отделить логику от представления и создавать сложные интерфейсы декларативно.",
          "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<VBox xmlns:fx=\"http://javafx.com/fxml\" \n      fx:controller=\"com.example.MainController\"\n      spacing=\"10\" padding=\"20\">\n    \n    <Label text=\"Добро пожаловать!\" \n           styleClass=\"welcome-label\"/>\n    \n    <TextField fx:id=\"nameField\" \n               promptText=\"Введите ваше имя\"/>\n    \n    <Button text=\"Приветствовать\" \n            onAction=\"#handleGreeting\"/>\n    \n    <Label fx:id=\"resultLabel\" \n           text=\"\" \n           styleClass=\"result-label\"/>\n</VBox>"
        },
        {
          "title": "CSS стилизация",
          "content": "Создание красивых стилей для приложения с использованием CSS. JavaFX поддерживает большинство CSS свойств и позволяет создавать современные интерфейсы.",
          "code": ".welcome-label {\n    -fx-font-size: 24px;\n    -fx-font-weight: bold;\n    -fx-text-fill: #2c3e50;\n    -fx-padding: 10px;\n}\n\n.button {\n    -fx-background-color: #3498db;\n    -fx-text-fill: white;\n    -fx-font-size: 14px;\n    -fx-padding: 10 20;\n    -fx-background-radius: 5;\n    -fx-cursor: hand;\n}\n\n.button:hover {\n    -fx-background-color: #2980b9;\n    -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 5, 0, 0, 1);\n}"
        },
        {
          "title": "Анимации и переходы",
          "content": "Создание плавных анимаций с помощью JavaFX. Встроенные классы для анимаций позволяют создавать красивые эффекты.",
          "code": "import javafx.animation.FadeTransition;\nimport javafx.animation.ScaleTransition;\nimport javafx.util.Duration;\n\n// Анимация появления\nFadeTransition fadeIn = new FadeTransition(Duration.millis(1000), node);\nfadeIn.setFromValue(0.0);\nfadeIn.setToValue(1.0);\nfadeIn.play();\n\n// Анимация масштабирования\nScaleTransition scaleIn = new ScaleTransition(Duration.millis(500), node);\nscaleIn.setFromX(0.5);\nscaleIn.setToX(1.0);\nscaleIn.setFromY(0.5);\nscaleIn.setToY(1.0);\nscaleIn.play();"
        },
        {
          "title": "Работа с данными и привязка",
          "content": "Использование свойств JavaFX для автоматического обновления UI. Привязка данных позволяет создавать реактивные интерфейсы.",
          "code": "import javafx.beans.property.StringProperty;\nimport javafx.beans.property.SimpleStringProperty;\n\npublic class User {\n    private StringProperty name = new SimpleStringProperty();\n    private StringProperty email = new SimpleStringProperty();\n    \n    public String getName() { return name.get(); }\n    public void setName(String name) { this.name.set(name); }\n    public StringProperty nameProperty() { return name; }\n    \n    public String getEmail() { return email.get(); }\n    public void setEmail(String email) { this.email.set(email); }\n    public StringProperty emailProperty() { return email; }\n}\n\n// Привязка данных\nTextField nameField = new TextField();\nnameField.textProperty().bindBidirectional(user.nameProperty());"
        }
      ]
    },
    "tasks": {
      "sections": [
        {
          "title": "Вариант 1: Арифметическое выражение",
          "description": "Вычислить значение выражения R = 3*t^2 + 3*t^5 + 4.9 для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: R = 3*t^2 + 3*t^5 + 4.9",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 2: Арифметическое выражение",
          "description": "Вычислить значение выражения K = ln(p^2 + y^3) + e^(p) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: K = ln(p^2 + y^3) + e^(p)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 3: Арифметическое выражение",
          "description": "Вычислить значение выражения G = n*(y + 3.5) + sqrt(y) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: G = n*(y + 3.5) + sqrt(y)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 4: Арифметическое выражение",
          "description": "Вычислить значение выражения D = 9.8*a^2 + 5.52*cos(t^5) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: D = 9.8*a^2 + 5.52*cos(t^5)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 5: Арифметическое выражение",
          "description": "Вычислить значение выражения L = 1.51*cos(x^2) + 2*x^3 для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: L = 1.51*cos(x^2) + 2*x^3",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 6: Арифметическое выражение",
          "description": "Вычислить значение выражения M = cos(2*y) + 3.6*e^(x) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: M = cos(2*y) + 3.6*e^(x)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 7: Арифметическое выражение",
          "description": "Вычислить значение выражения N = m^2 + 2.8*abs(m) + 0.55 для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: N = m^2 + 2.8*abs(m) + 0.55",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 8: Арифметическое выражение",
          "description": "Вычислить значение выражения T = sqrt(abs(6*y^2 - 0.1*y + 4)) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: T = sqrt(abs(6*y^2 - 0.1*y + 4))",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 9: Арифметическое выражение",
          "description": "Вычислить значение выражения V = ln(y + 0.95) + sin(x^4) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: V = ln(y + 0.95) + sin(x^4)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 10: Арифметическое выражение",
          "description": "Вычислить значение выражения U = e^(y) + 7.355*k^2 + sin(x)^2 для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: U = e^(y) + 7.355*k^2 + sin(x)^2",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 11: Арифметическое выражение",
          "description": "Вычислить значение выражения S = 9.756*y^7 + 2*tan(x) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: S = 9.756*y^7 + 2*tan(x)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 12: Арифметическое выражение",
          "description": "Вычислить значение выражения K = 7*t^2 + 3*sin(x^3) + 9.2 для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: K = 7*t^2 + 3*sin(x^3) + 9.2",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 13: Арифметическое выражение",
          "description": "Вычислить значение выражения E = sqrt(abs(3*y^2 + 0.5*y + 4)) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: E = sqrt(abs(3*y^2 + 0.5*y + 4))",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 14: Арифметическое выражение",
          "description": "Вычислить значение выражения R = sqrt(abs(sin(y)^2 + 6.835 + e^(x))) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: R = sqrt(abs(sin(y)^2 + 6.835 + e^(x)))",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 15: Арифметическое выражение",
          "description": "Вычислить значение выражения H = sin(y^2) - 2.8*y + sqrt(abs(y)) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: H = sin(y^2) - 2.8*y + sqrt(abs(y))",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 16: Арифметическое выражение",
          "description": "Вычислить значение выражения S = sqrt(cos(4*y^2) + 7.151) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: S = sqrt(cos(4*y^2) + 7.151)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 17: Арифметическое выражение",
          "description": "Вычислить значение выражения N = 3*y^2 + sqrt(y + 1) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: N = 3*y^2 + sqrt(y + 1)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 18: Арифметическое выражение",
          "description": "Вычислить значение выражения Z = 3*y^2 + sqrt(y^3 + 1) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: Z = 3*y^2 + sqrt(y^3 + 1)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 19: Арифметическое выражение",
          "description": "Вычислить значение выражения P = n*sqrt(y^3 + 1.09*g) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: P = n*sqrt(y^3 + 1.09*g)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 20: Арифметическое выражение",
          "description": "Вычислить значение выражения U = e^(k + y) + tan(sqrt(y)) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: U = e^(k + y) + tan(sqrt(y))",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 21: Арифметическое выражение",
          "description": "Вычислить значение выражения P = e^(y + 5.5) + 9.1*h^3 для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: P = e^(y + 5.5) + 9.1*h^3",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 22: Арифметическое выражение",
          "description": "Вычислить значение выражения T = sin(2*u) * ln(2*y^2 + sqrt(x)) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: T = sin(2*u) * ln(2*y^2 + sqrt(x))",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 23: Арифметическое выражение",
          "description": "Вычислить значение выражения G = e^(2*y) + sin(f) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: G = e^(2*y) + sin(f)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 24: Арифметическое выражение",
          "description": "Вычислить значение выражения F = 2*sin(0.214*y^5 + 1) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: F = 2*sin(0.214*y^5 + 1)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 25: Арифметическое выражение",
          "description": "Вычислить значение выражения G = e^(2*y) + sin(f^2) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: G = e^(2*y) + sin(f^2)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 26: Арифметическое выражение",
          "description": "Вычислить значение выражения Z = sin(p^2 + 0.4)^3 для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: Z = sin(p^2 + 0.4)^3",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 27: Арифметическое выражение",
          "description": "Вычислить значение выражения W = 1.03*v + e^(2*y) + tan(abs(x)) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: W = 1.03*v + e^(2*y) + tan(abs(x))",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 28: Арифметическое выражение",
          "description": "Вычислить значение выражения T = e^(y + h) + sqrt(abs(6.4*y)) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: T = e^(y + h) + sqrt(abs(6.4*y))",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 29: Арифметическое выражение",
          "description": "Вычислить значение выражения N = 3*y^2 + sqrt(abs(y + 1)) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: N = 3*y^2 + sqrt(abs(y + 1))",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        },
        {
          "title": "Вариант 30: Арифметическое выражение",
          "description": "Вычислить значение выражения W = e^(y + r) + 7.2*sin(r) для заданных входных значений.",
          "requirements": [
            "Запросить необходимые переменные у пользователя",
            "Вычислить значение по формуле: W = e^(y + r) + 7.2*sin(r)",
            "Вывести результат на экран"
          ],
          "difficulty": "Средняя",
          "time": "10-20 минут"
        }
      ]
    }
  }
]